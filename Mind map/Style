A contact management system (CMS) is a software application or program designed to help individuals or organizations organize and manage their contact information effectively. It serves as a digital address book where users can store, retrieve, edit, and delete contact details. Here is some information about a typical contact management system project:

**1. Purpose:**
   - The primary purpose of a contact management system is to provide a centralized repository for storing and managing contact information.

**2. Features and Functionality:**
   - **Add Contacts:** Users can add new contacts to the system, providing details such as name, phone number, address, and email.
   - **List Contacts:** The system displays a list of all stored contacts, allowing users to view their contact information.
   - **Edit Contacts:** Users can update or modify contact details for existing entries.
   - **Delete Contacts:** Contacts can be deleted from the system.
   - **Search Contacts:** Users can search for specific contacts based on criteria like name or phone number.
   - **User-Friendly Interface:** An intuitive user interface is provided to make it easy for users to interact with the system.
   - **Error Handling:** The system should handle errors gracefully, such as invalid input or exceeding the maximum number of contacts.
   
**3. Data Structure:**
   - Contact information is typically stored in a data structure, often an array or a database, where each entry represents an individual contact. In the given code example, an array of structs is used to store contact data.

**4. Menu System:**
   - A menu-driven system allows users to choose from various options, such as adding, listing, editing, or deleting contacts.

**5. Validation:**
   - Input validation ensures that users provide valid and expected data when adding or editing contacts. For example, validating phone numbers and email addresses.

**6. Limitations:**
   - Most contact management systems have a maximum capacity for storing contacts. In the provided code, this limitation is defined as `MAX_CONTACTS`.

**7. User Feedback:**
   - The system provides feedback to the user after each operation, confirming the success or failure of the action.

**8. Persistence:**
   - In more advanced CMS projects, contact data can be persisted to a file or database to ensure that contacts are not lost when the program is closed and reopened.

**9. Security:**
   - Security measures may be implemented to protect contact data, such as user authentication and access control.

**10. Extensibility:**
    - Depending on the project's scope, you can consider adding features like sorting contacts, grouping contacts, or importing/exporting contact data.

**11. Testing:**
    - Thorough testing is essential to ensure the system works correctly and handles various scenarios, including edge cases and error conditions.

**12. Documentation:**
    - Proper documentation of the code and user instructions is crucial for maintaining and using the contact management system effectively.

This information provides an overview of what a contact management system project involves. Depending on the project's requirements and complexity, additional features and considerations may be necessary.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_CONTACTS 100

struct Contact {
    char name[50];
    char phoneNumber[15];
    char address[100];
    char email[50];
};

void addContact(struct Contact contacts[], int *numContacts) {
    if (*numContacts >= MAX_CONTACTS) {
        printf("Contact list is full.\n");
        return;
    }
    
    struct Contact newContact;
    printf("Enter contact details:\n");
    printf("Name: ");
    scanf("%s", newContact.name);
    printf("Phone Number: ");
    scanf("%s", newContact.phoneNumber);
    printf("Address: ");
    scanf("%s", newContact.address);
    printf("Email: ");
    scanf("%s", newContact.email);

    contacts[*numContacts] = newContact;
    (*numContacts)++;
    
    printf("Contact added successfully.\n");
}

void listContacts(struct Contact contacts[], int numContacts) {
    printf("List of Contacts:\n");
    for (int i = 0; i < numContacts; i++) {
        printf("Contact %d:\n", i + 1);
        printf("Name: %s\n", contacts[i].name);
        printf("Phone Number: %s\n", contacts[i].phoneNumber);
        printf("Address: %s\n", contacts[i].address);
        printf("Email: %s\n", contacts[i].email);
        printf("--------------------\n");
    }
}

void editContact(struct Contact contacts[], int numContacts) {
    printf("Enter the index of the contact to edit (1-%d): ", numContacts);
    int index;
    scanf("%d", &index);

    if (index < 1 || index > numContacts) {
        printf("Invalid index.\n");
        return;
    }
    
    struct Contact *contact = &contacts[index - 1];
    
    printf("Enter new details:\n");
    printf("Name: ");
    scanf("%s", contact->name);
    printf("Phone Number: ");
    scanf("%s", contact->phoneNumber);
    printf("Address: ");
    scanf("%s", contact->address);
    printf("Email: ");
    scanf("%s", contact->email);
    
    printf("Contact updated successfully.\n");
}

void deleteContact(struct Contact contacts[], int *numContacts) {
    printf("Enter the index of the contact to delete (1-%d): ", *numContacts);
    int index;
    scanf("%d", &index);

    if (index < 1 || index > *numContacts) {
        printf("Invalid index.\n");
        return;
    }
    
    for (int i = index - 1; i < *numContacts - 1; i++) {
        contacts[i] = contacts[i + 1];
    }
    
    (*numContacts)--;
    printf("Contact deleted successfully.\n");
}

int main() {
    struct Contact contacts[MAX_CONTACTS];
    int numContacts = 0;
    int choice;

    while (1) {
        printf("\nContact Management System\n");
        printf("1. Add Contact\n");
        printf("2. List Contacts\n");
        printf("3. Edit Contact\n");
        printf("4. Delete Contact\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addContact(contacts, &numContacts);
                break;
            case 2:
                listContacts(contacts, numContacts);
                break;
            case 3:
                editContact(contacts, numContacts);
                break;
            case 4:
                deleteContact(contacts, &numContacts);
                break;
            case 5:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please select a valid option.\n");
        }
    }

    return 0;
} 
